filetype off
set list
filetype plugin indent on

call plug#begin('~/.config/nvim/plugged')

Plug 'benekastah/neomake'
Plug 'kien/ctrlp.vim'
Plug 'junegunn/vim-easy-align'
Plug 'rking/ag.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'matze/vim-move'
Plug 'Quramy/tsuquyomi'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'Shougo/vimproc.vim'
Plug 'leafgarland/typescript-vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/vim-stylus'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'
Plug 'sgur/vim-lazygutter'
Plug 'digitaltoad/vim-pug'
""""snippets
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'
Plug 'ervandew/supertab'
Plug 'SirVer/ultisnipS'
Plug 'Valloric/YouCompleteMe'
Plug 'scrooloose/syntastic'
Plug 'vitalk/vim-simple-todo'
Plug 'lsdr/monokai'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'

function! DoRemote(arg)
  UpdateRemotePlugins
endfunction
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }

call plug#end()

set showcmd
set nowrap
set tabstop=2 shiftwidth=2
set expandtab
set backspace=indent,eol,start

set smartcase

set sw=2
set ts=2

set guifont=Hack:h12
"colorscheme atom-dark-256
colorscheme monokai

set nobackup
set nowritebackup
set noswapfile

set relativenumber
set clipboard=unnamed

" Leader key
let mapleader = ","

" Remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" Tsuquyomi
autocmd FileType typescript nmap <buffer> <Leader>e <Plug>(TsuquyomiRenameSymbol)
autocmd FileType typescript nmap <buffer> <Leader>E <Plug>(TsuquyomiRenameSymbolC)

" NERD Mappings
map <C-n> :NERDTreeToggle<CR>
nmap <leader>n :NERDTreeFind<CR>

" Tabs Mapping
map <C-t> :tabnew<CR>

" Don't be stupid!
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Airline settings
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'

" Identline settings
let g:indentLine_enabled = 0

" Move lines
let g:move_key_modifier = 'C'

"Javascript
let g:jsx_ext_required = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_checkers = ['jsxhint']
let g:syntastic_javascript_jsxhint_exec = 'jsx-jshint-wrapper'

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']


" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Add empty lines without entering normal mode
map <leader>o o<Esc>
map <leader>O O<Esc>

" fzf mappings
map <leader>gf :GitFiles<CR>
map <leader>gc :Commits<CR>
map <leader>/ :Lines<CR>
map <leader>b :Buffers<CR>
map <leader><leader> :Files<CR>
map <leader>\ :BLines<CR>

" Bind commands
command! Q q " Bind :Q to :q
command! Qall qall
command! QA qall
command! E e
command! W w
command! Wq wq

" Make < > shifts keep selection
vnoremap < <gv
vnoremap > >gv

command Greview :Git! diff --staged
nnoremap <leader>gr :Greview<cr>
